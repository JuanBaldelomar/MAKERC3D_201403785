package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, AND, NOT, OR, MAYOR, MAYOR_IGUAL, MENOR, MENOR_IGUAL, IGUAL, DIFERENTE;
nonterminal NodoC3D inicial, expresion, condicion, Bool, OPREL;


precedence left OR;
precedence left AND;
precedence left IGUAL, DIFERENTE, MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp 
                    {: 
                        RESULT = exp;
                        if (exp.tipo==-1){
                        ControlC3D.reiniciar();
                        ControlC3D.agregarC3D("ERROR EN LA CADENA DE ENTRADA\n");
                        }else{
                        ControlC3D.agregarC3D("ETIQUETA_VERDADERO: " + exp.etqV + ":\nETIQUETA_FALSO: " + exp.etqF + ":");
                        }
                        
                    :}
               ;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        if (izq.tipo == der.tipo && izq.tipo == 1){
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp, 1); 
                        }else{
                        RESULT = new NodoC3D("", -1);
                        }
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                       if (izq.tipo == der.tipo && izq.tipo == 1){
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp, 1); 
                        }else{
                        RESULT = new NodoC3D("", -1);
                        }
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        if (izq.tipo == der.tipo && izq.tipo == 1){
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp, 1); 
                        }else{
                        RESULT = new NodoC3D("", -1);
                        }
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                       if (izq.tipo == der.tipo && izq.tipo == 1){
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp, 1); 
                        }else{
                        RESULT = new NodoC3D("", -1);
                        } 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                       if (izq.tipo == der.tipo && izq.tipo == 1){
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp, 1); 
                        }else{
                        RESULT = new NodoC3D("", -1);
                        }
                    :}
            |   MENOS expresion:exp 
                    {: 
                        if (exp.tipo == 1){
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp, 1);
                        }else{
                            RESULT = new NodoC3D("", -1);
                        } 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id, 1); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero, 1); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal, 1); :}
            


            | expresion:izq AND {:ControlC3D.agregarC3D(izq.etqV + ":\n" );:} expresion:der
                    {: 
                       if (izq.tipo == der.tipo && izq.tipo == 2 ){
                            RESULT = new NodoC3D(der.etqV, izq.etqF + ", " + der.etqF, 2); 
                        }else{
                            RESULT = new NodoC3D("", "", -1);
                        }
                    :}
            |   expresion:izq OR {:ControlC3D.agregarC3D(izq.etqF + ":\n" );:} expresion:der
                    {: 
                        if (izq.tipo == der.tipo && izq.tipo == 2){
                            RESULT = new NodoC3D(izq.etqV + ", " + der.etqV, der.etqF, 2); 
                        }else{
                            RESULT = new NodoC3D("", "", -1);
                        }
                    :}
            |   NOT expresion:exp 
                    {: 
                        if (exp.tipo == 3){
                            RESULT = new NodoC3D(exp.etqF, exp.etqV, 2);
                        }else{
                            RESULT = new NodoC3D("","",-1);
                        } 
                    :}

            | expresion:izq IGUAL expresion:der
                    {: 
                        if (izq.tipo == der.tipo && izq.tipo == 1){    
                        String etqV = ControlC3D.generarEtiqueta();
                        String etqF = ControlC3D.generarEtiqueta();
                        String c3d =  " if " + izq.getCad() + " " + "==" + " " + der.getCad() + " goto " + etqV + "\n" + "goto " + etqF + "\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etqV, etqF, 2); 
                        }else{
                         RESULT = new NodoC3D("","", -1);
                        }
                    :}
            | expresion:izq DIFERENTE:op expresion:der
                     {: 
                         if (izq.tipo == der.tipo && izq.tipo == 1){    
                        String etqV = ControlC3D.generarEtiqueta();
                        String etqF = ControlC3D.generarEtiqueta();
                        String c3d =  " if " + izq.getCad() + " " + "!=" + " " + der.getCad() + " goto " + etqV + "\n" + "goto " + etqF + "\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etqV, etqF, 2); 
                        }else{
                         RESULT = new NodoC3D("","", -1);
                        }
                    :}
            | expresion:izq MAYOR:op expresion:der
                     {: 
                         if (izq.tipo == der.tipo && izq.tipo == 1){    
                        String etqV = ControlC3D.generarEtiqueta();
                        String etqF = ControlC3D.generarEtiqueta();
                        String c3d =  " if " + izq.getCad() + " " + ">" + " " + der.getCad() + " goto " + etqV + "\n" + "goto " + etqF + "\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etqV, etqF, 2); 
                        }else{
                         RESULT = new NodoC3D("","", -1);
                        }
                    :}
            | expresion:izq MENOR:op expresion:der
                     {: 
                        if (izq.tipo == der.tipo && izq.tipo == 1){    
                        String etqV = ControlC3D.generarEtiqueta();
                        String etqF = ControlC3D.generarEtiqueta();
                        String c3d =  " if " + izq.getCad() + " " + "<" + " " + der.getCad() + " goto " + etqV + "\n" + "goto " + etqF + "\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etqV, etqF, 2); 
                        }else{
                         RESULT = new NodoC3D("","", -1);
                        }
                    :}
            | expresion:izq MAYOR_IGUAL:op expresion:der
                      {: 
                        if (izq.tipo == der.tipo && izq.tipo == 1){    
                        String etqV = ControlC3D.generarEtiqueta();
                        String etqF = ControlC3D.generarEtiqueta();
                        String c3d =  " if " + izq.getCad() + " " + ">=" + " " + der.getCad() + " goto " + etqV + "\n" + "goto " + etqF + "\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etqV, etqF, 2); 
                        }else{
                         RESULT = new NodoC3D("","", -1);
                        }
                    :}
            | expresion:izq MENOR_IGUAL:op expresion:der
                     {: 
                        if (izq.tipo == der.tipo && izq.tipo == 1){    
                        String etqV = ControlC3D.generarEtiqueta();
                        String etqF = ControlC3D.generarEtiqueta();
                        String c3d =  " if " + izq.getCad() + " " + "<=" + " " + der.getCad() + " goto " + etqV + "\n" + "goto " + etqF + "\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etqV, etqF, 2); 
                        }else{
                         RESULT = new NodoC3D("","", -1);
                        } 
                    :}
                ;

